<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XML Spy v4.2 U (http://www.xmlspy.com) by mjep (dms) -->
<xsd:schema targetNamespace="http://esa.ssa.gen.catalogue/mmsos/data/1.2/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.w3.org/2005/08/addressing" xmlns:omc="http://esa.ssa.sst/2.1/omc/" xmlns:ndm="urn:ccsds:recommendation:navigation:schema:ndmxml" xmlns:mmsos="http://esa.ssa.gen.catalogue/mmsos/data/1.2/" xmlns:eCCSDS="http://esa.ssa.sst/2.1/CCSDS/" xmlns:com="http://esa.ssa.sst/2.1/common/" xmlns:cattr="http://esa.ssa.sst/2.1/catalogue/track/" xmlns:catorb="http://esa.ssa.sst/2.1/catalogue/orbit/" xmlns:catobj="http://esa.ssa.sst/2.1/catalogue/object/" xmlns:cateph="http://esa.ssa.sst/2.1/catalogue/ephemeredes/">
	<xsd:import namespace="http://esa.ssa.sst/2.1/catalogue/orbit/" schemaLocation="../../../../../commonSSTDataModel/esa/ssa/sst/catalogue/orbit/orbit.xsd"/>
	<xsd:import namespace="http://www.w3.org/2005/08/addressing" schemaLocation="../../../../wsdl/wsaddr.xsd"/>
	<xsd:import namespace="http://esa.ssa.sst/2.1/common/" schemaLocation="../../../../../commonSSTDataModel/esa/ssa/sst/common/common.xsd"/>
	<xsd:import namespace="http://esa.ssa.sst/2.1/omc/" schemaLocation="../../../../../commonSSTDataModel/esa/ssa/sst/omc/omc.xsd"/>
	<xsd:import namespace="http://esa.ssa.sst/2.1/catalogue/object/" schemaLocation="../../../../../commonSSTDataModel/esa/ssa/sst/catalogue/object/object.xsd"/>
	<xsd:import namespace="http://esa.ssa.sst/2.1/catalogue/ephemeredes/" schemaLocation="../../../../../commonSSTDataModel/esa/ssa/sst/catalogue/ephemeredes/ephemeredes.xsd"/>
	<xsd:import namespace="http://esa.ssa.sst/2.1/catalogue/track/" schemaLocation="../../../../../commonSSTDataModel/esa/ssa/sst/catalogue/track/track.xsd"/>
	<xsd:import namespace="urn:ccsds:recommendation:navigation:schema:ndmxml" schemaLocation="../../../../../commonSSTDataModel/CCSDS/ndmxml-1.0-namespace-1.1.xsd"/>
	<xsd:import namespace="http://esa.ssa.sst/2.1/CCSDS/" schemaLocation="../../../../../commonSSTDataModel/esa/ssa/sst/extendedCCSDS/extendedCCSDS.xsd"/>
	<!-- createObject -->
	<xsd:element name="createObjectRequest" type="mmsos:CreateObjectRequest"/>
	<xsd:complexType name="CreateObjectRequest">
		<xsd:sequence>
			<xsd:element name="ownerId" type="xsd:long" minOccurs="0"/>
			<xsd:element name="object" type="catobj:Object"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="createObjectResponse" type="mmsos:CreateObjectResponse"/>
	<xsd:complexType name="CreateObjectResponse">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- retrieveObjectIds -->
	<xsd:element name="retrieveObjectIdsRequest" type="mmsos:RetrieveObjectIdsRequest"/>
	<xsd:complexType name="RetrieveObjectIdsRequest">
		<xsd:sequence>
			<xsd:element name="filter" type="mmsos:ObjectFilter" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="retrieveObjectIdsResponse" type="mmsos:RetrieveObjectIdsResponse"/>
	<xsd:complexType name="RetrieveObjectIdsResponse">
		<xsd:sequence>
			<xsd:element name="object" type="mmsos:ObjectNameMap" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- retrieveDPCObjects -->
	<xsd:element name="retrieveDPCObjectsRequest" type="mmsos:RetrieveDPCObjectsRequest"/>
	<xsd:complexType name="RetrieveDPCObjectsRequest">
		<xsd:sequence>
			<xsd:element name="filter" type="mmsos:DPCObjectFilter" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="retrieveDPCObjectsResponse" type="mmsos:RetrieveDPCObjectsResponse"/>
	<xsd:complexType name="RetrieveDPCObjectsResponse">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- retrieveObject -->
	<xsd:element name="retrieveObjectRequest" type="mmsos:RetrieveObjectRequest"/>
	<xsd:complexType name="RetrieveObjectRequest">
		<xsd:choice>
			<xsd:element name="ssaId" type="xsd:long"/>
			<xsd:element name="filter" type="mmsos:CatalogueObjectFilter"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:element name="retrieveObjectResponse" type="mmsos:RetrieveObjectResponse"/>
	<xsd:complexType name="RetrieveObjectResponse">
		<xsd:sequence>
			<xsd:element name="object" type="catobj:Object" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- updateObject -->
	<xsd:element name="updateObjectRequest" type="mmsos:UpdateObjectRequest"/>
	<xsd:complexType name="UpdateObjectRequest">
		<xsd:sequence>
			<xsd:element name="object" type="catobj:Object"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="updateObjectResponse" type="mmsos:UpdateObjectResponse"/>
	<xsd:complexType name="UpdateObjectResponse">
		<xsd:sequence>
			<xsd:element name="ok" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- deleteObject -->
	<xsd:element name="deleteObjectRequest" type="mmsos:DeleteObjectRequest"/>
	<xsd:complexType name="DeleteObjectRequest">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="deleteObjectResponse" type="mmsos:DeleteObjectResponse"/>
	<xsd:complexType name="DeleteObjectResponse">
		<xsd:sequence>
			<xsd:element name="ok" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- invalidateObject -->
	<xsd:element name="invalidateObjectRequest" type="mmsos:InvalidateObjectRequest"/>
	<xsd:complexType name="InvalidateObjectRequest">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="invalidateObjectResponse" type="mmsos:InvalidateObjectResponse"/>
	<xsd:complexType name="InvalidateObjectResponse">
		<xsd:sequence>
			<xsd:element name="ok" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- mergeObjects -->
	<xsd:element name="mergeObjectsRequest" type="mmsos:MergeObjectsRequest"/>
	<xsd:complexType name="MergeObjectsRequest">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long" maxOccurs="unbounded"/>
			<xsd:element name="object" type="catobj:Object"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="mergeObjectsResponse" type="mmsos:MergeObjectsResponse"/>
	<xsd:complexType name="MergeObjectsResponse">
		<xsd:sequence>
			<xsd:element name="object" type="catobj:Object"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- assignCosparID-->
	<xsd:element name="assignCosparIDRequest" type="mmsos:AssignCosparIDRequest"/>
	<xsd:complexType name="AssignCosparIDRequest">
		<xsd:sequence>
			<xsd:element name="cosparID" type="catobj:CosparId"/>
			<xsd:element name="ssaId" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="assignCosparIDResponse" type="mmsos:AssignCosparIDResponse"/>
	<xsd:complexType name="AssignCosparIDResponse">
		<xsd:sequence>
			<xsd:element name="ok" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- getSSAIDForCosparID -->
	<xsd:element name="translateCosparIDRequest" type="mmsos:GetSSAIDForCosparIDRequest"/>
	<xsd:complexType name="GetSSAIDForCosparIDRequest">
		<xsd:sequence>
			<xsd:element name="cosparID" type="catobj:CosparId"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="translateCosparIDResponse" type="mmsos:GetSSAIDForCosparIDResponse"/>
	<xsd:complexType name="GetSSAIDForCosparIDResponse">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long"/>
			<xsd:element name="timestamp" type="xsd:dateTime"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- countObject -->
	<xsd:element name="countObjectRequest" type="mmsos:CountObjectRequest"/>
	<xsd:complexType name="CountObjectRequest">
		<xsd:sequence>
			<xsd:element name="filter" type="mmsos:CatalogueObjectFilter"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="countObjectResponse" type="mmsos:CountObjectResponse"/>
	<xsd:complexType name="CountObjectResponse">
		<xsd:sequence>
			<xsd:element name="number" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- addTrackingData -->
	<xsd:element name="addTrackingDataRequest" type="mmsos:AddTrackingDataRequest"/>
	<xsd:complexType name="AddTrackingDataRequest">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long"/>
			<xsd:element name="data" type="cattr:SSTTrackingDataObservationType"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="addTrackingDataResponse" type="mmsos:AddTrackingDataResponse"/>
	<xsd:complexType name="AddTrackingDataResponse">
		<xsd:sequence>
			<xsd:element name="trackingDataId" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- retrieveTrackingDataIds -->
	<xsd:element name="retrieveTrackingDataIdsRequest" type="mmsos:RetrieveTrackingDataIdsRequest"/>
	<xsd:complexType name="RetrieveTrackingDataIdsRequest">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long"/>
			<xsd:element name="from" type="ndm:epochType" minOccurs="0"/>
			<xsd:element name="to" type="ndm:epochType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="retrieveTrackingDataIdsResponse" type="mmsos:RetrieveTrackingDataIdsResponse"/>
	<xsd:complexType name="RetrieveTrackingDataIdsResponse">
		<xsd:sequence>
			<xsd:element name="trackingDataIds" type="xsd:long" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="sliceLength" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- retrieveTrackingData -->
	<xsd:element name="retrieveTrackingDataRequest" type="mmsos:RetrieveTrackingDataRequest"/>
	<xsd:complexType name="RetrieveTrackingDataRequest">
		<xsd:sequence>
			<xsd:element name="filter" type="mmsos:TrackingDataFilter"/>
			<xsd:element name="from" type="ndm:epochType" minOccurs="0"/>
			<xsd:element name="to" type="ndm:epochType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="retrieveTrackingDataResponse" type="mmsos:RetrieveTrackingDataResponse"/>
	<xsd:complexType name="RetrieveTrackingDataResponse">
		<xsd:sequence>
			<xsd:element name="trackingData" type="mmsos:TrackingDataType" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="TrackingDataFilter">
		<xsd:choice>
			<xsd:element name="trackingDataIds" type="xsd:long" maxOccurs="unbounded"/>
			<xsd:element name="objectID" type="catobj:ObjectIdType"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="TrackingDataType">
		<xsd:sequence>
			<xsd:element name="id" type="xsd:long"/>
			<xsd:element name="data" type="cattr:SSTTrackingDataObservationType"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- countTrackingData -->
	<xsd:element name="countTrackingDataRequest" type="mmsos:CountTrackingDataRequest"/>
	<xsd:complexType name="CountTrackingDataRequest">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long"/>
			<xsd:element name="from" type="ndm:epochType" minOccurs="0"/>
			<xsd:element name="to" type="ndm:epochType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="countTrackingDataResponse" type="mmsos:CountTrackingDataResponse"/>
	<xsd:complexType name="CountTrackingDataResponse">
		<xsd:sequence>
			<xsd:element name="number" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- updateTrackingData -->
	<xsd:element name="updateTrackingDataRequest" type="mmsos:UpdateTrackingDataRequest"/>
	<xsd:complexType name="UpdateTrackingDataRequest">
		<xsd:sequence>
			<xsd:element name="trackingDataId" type="xsd:long"/>
			<xsd:element name="data" type="cattr:SSTTrackingDataObservationType"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="updateTrackingDataResponse" type="mmsos:UpdateTrackingDataResponse"/>
	<xsd:complexType name="UpdateTrackingDataResponse">
		<xsd:sequence>
			<xsd:element name="ok" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- deleteTrackingData -->
	<xsd:element name="deleteTrackingDataRequest" type="mmsos:DeleteTrackingDataRequest"/>
	<xsd:complexType name="DeleteTrackingDataRequest">
		<xsd:sequence>
			<xsd:element name="trackingDataId" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="deleteTrackingDataResponse" type="mmsos:DeleteTrackingDataResponse"/>
	<xsd:complexType name="DeleteTrackingDataResponse">
		<xsd:sequence>
			<xsd:element name="ok" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- addOrbit -->
	<xsd:element name="addOrbitRequest" type="mmsos:AddOrbitRequest"/>
	<xsd:complexType name="AddOrbitRequest">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long"/>
			<xsd:element name="orbit" type="catorb:Orbit"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="addOrbitResponse" type="mmsos:AddOrbitResponse"/>
	<xsd:complexType name="AddOrbitResponse">
		<xsd:sequence>
			<xsd:element name="orbitId" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- retrieveCurrentOrbit -->
	<xsd:element name="retrieveCurrentOrbitRequest" type="mmsos:RetrieveCurrentOrbitRequest"/>
	<xsd:complexType name="RetrieveCurrentOrbitRequest">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="retrieveCurrentOrbitResponse" type="mmsos:RetrieveCurrentOrbitResponse"/>
	<xsd:complexType name="RetrieveCurrentOrbitResponse">
		<xsd:sequence>
			<xsd:element name="data" type="mmsos:OrbitDetails"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- retrieveOrbitIds -->
	<xsd:element name="retrieveOrbitIdsRequest" type="mmsos:RetrieveOrbitIdsRequest"/>
	<xsd:complexType name="RetrieveOrbitIdsRequest">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long"/>
			<xsd:element name="from" type="ndm:epochType" minOccurs="0"/>
			<xsd:element name="to" type="ndm:epochType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="retrieveOrbitIdsResponse" type="mmsos:RetrieveOrbitIdsResponse">
		<xsd:annotation>
			<xsd:documentation>&lt;p&gt;returns the list of OrbitIds
                matching the selected object and time frame plus the
                size of the slice as the orbits can be retrieved through
                retrieveOrbit&lt;/p&gt;</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="RetrieveOrbitIdsResponse">
		<xsd:sequence>
			<xsd:element name="ids" type="xsd:long" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="sliceLength" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- retrieveOrbit -->
	<xsd:element name="retrieveOrbitRequest" type="mmsos:RetrieveOrbitRequest"/>
	<xsd:complexType name="RetrieveOrbitRequest">
		<xsd:choice>
			<xsd:element name="orbitId" type="xsd:long" maxOccurs="unbounded"/>
			<xsd:element name="filter" type="mmsos:OrbitFilter"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:element name="retrieveOrbitResponse" type="mmsos:RetrieveOrbitResponse"/>
	<xsd:complexType name="RetrieveOrbitResponse">
		<xsd:sequence>
			<xsd:element name="orbit" type="catorb:Orbit" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- getThirdPartyOrbitData -->
	<xsd:element name="getThirdPartyOrbitDataRequest" type="mmsos:GetThirdPartyOrbitDataRequest"/>
	<xsd:complexType name="GetThirdPartyOrbitDataRequest">
		<xsd:sequence>
			<xsd:element name="originator" type="mmsos:ThirdPartyListType"/>
			<xsd:element name="objectIDRange" type="mmsos:ObjectIDRangeType">
				<xsd:annotation>
					<xsd:documentation xml:lang="en"> Query filter for Object IDs
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="period" type="com:TimeRange"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="getThirdPartyOrbitDataResponse" type="mmsos:GetThirdPartyOrbitDataResponse"/>
	<xsd:complexType name="GetThirdPartyOrbitDataResponse">
		<xsd:sequence>
			<xsd:element name="thirdPartyData" type="mmsos:ThridPartyData" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="ThridPartyData">
		<xsd:sequence>
			<xsd:element name="thirdPartyInfo" type="ndm:opmType"/>
			<xsd:element name="usedData" type="xsd:boolean"/>
			<xsd:element name="associatedObject" type="catobj:ObjectIdType">
				<xsd:annotation>
					<xsd:documentation>ObjectID</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="associatedResidual" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Statevector difference between third party data and catalogue orbit Data</xsd:documentation>
				</xsd:annotation>
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="stateVector" type="ndm:stateVectorType"/>
						<xsd:element name="stateVectorParameters" type="mmsos:StateVectorParametersType"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<!-- updateOrbit -->
	<xsd:element name="updateOrbitRequest" type="mmsos:UpdateOrbitRequest"/>
	<xsd:complexType name="UpdateOrbitRequest">
		<xsd:sequence>
			<xsd:element name="orbit" type="catorb:Orbit"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="updateOrbitResponse" type="mmsos:UpdateOrbitResponse"/>
	<xsd:complexType name="UpdateOrbitResponse">
		<xsd:sequence>
			<xsd:element name="ok" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- deleteOrbit -->
	<xsd:element name="deleteOrbitRequest" type="mmsos:DeleteOrbitRequest"/>
	<xsd:complexType name="DeleteOrbitRequest">
		<xsd:sequence>
			<xsd:element name="orbitId" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="deleteOrbitResponse" type="mmsos:DeleteOrbitResponse"/>
	<xsd:complexType name="DeleteOrbitResponse">
		<xsd:sequence>
			<xsd:element name="ok" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- setOrbitUpdateDeadline -->
	<xsd:element name="setOrbitUpdateDeadlineRequest" type="mmsos:SetOrbitUpdateDeadlineRequest"/>
	<xsd:complexType name="SetOrbitUpdateDeadlineRequest">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long" maxOccurs="unbounded"/>
			<xsd:element name="deadline" type="xsd:dateTime"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="setOrbitUpdateDeadlineResponse" type="mmsos:SetOrbitUpdateDeadlineResponse"/>
	<xsd:complexType name="SetOrbitUpdateDeadlineResponse">
		<xsd:sequence>
			<xsd:element name="ok" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- clearOrbitUpdateDeadline -->
	<xsd:element name="clearOrbitUpdateDeadlineRequest" type="mmsos:ClearOrbitUpdateDeadlineRequest"/>
	<xsd:complexType name="ClearOrbitUpdateDeadlineRequest">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="clearOrbitUpdateDeadlineResponse" type="mmsos:ClearOrbitUpdateDeadlineResponse"/>
	<xsd:complexType name="ClearOrbitUpdateDeadlineResponse">
		<xsd:sequence>
			<xsd:element name="ok" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- countOrbit -->
	<xsd:element name="countOrbitRequest" type="mmsos:CountOrbitRequest"/>
	<xsd:complexType name="CountOrbitRequest">
		<xsd:choice>
			<xsd:element name="filter" type="mmsos:OrbitFilter"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:element name="countOrbitResponse" type="mmsos:CountOrbitResponse"/>
	<xsd:complexType name="CountOrbitResponse">
		<xsd:sequence>
			<xsd:element name="number" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- addMeanElement -->
	<xsd:element name="addMeanElementRequest" type="mmsos:AddMeanElementRequest"/>
	<xsd:complexType name="AddMeanElementRequest">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long"/>
			<xsd:element name="meanElement" type="mmsos:MeanElement"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="addMeanElementResponse" type="mmsos:AddMeanElementResponse"/>
	<xsd:complexType name="AddMeanElementResponse">
		<xsd:sequence>
			<xsd:element name="meanElementId" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- updateMeanElement -->
	<xsd:element name="updateMeanElementRequest" type="mmsos:UpdateMeanElementRequest"/>
	<xsd:complexType name="UpdateMeanElementRequest">
		<xsd:sequence>
			<xsd:element name="meanElement" type="mmsos:MeanElement"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="updateMeanElementResponse" type="mmsos:UpdateMeanElementResponse"/>
	<xsd:complexType name="UpdateMeanElementResponse">
		<xsd:sequence>
			<xsd:element name="ok" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- deleteMeanElement -->
	<xsd:element name="deleteMeanElementRequest" type="mmsos:DeleteMeanElementRequest"/>
	<xsd:complexType name="DeleteMeanElementRequest">
		<xsd:sequence>
			<xsd:element name="meanElementId" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="deleteMeanElementResponse" type="mmsos:DeleteMeanElementResponse"/>
	<xsd:complexType name="DeleteMeanElementResponse">
		<xsd:sequence>
			<xsd:element name="ok" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- retrieveMeanElement -->
	<xsd:element name="retrieveMeanElementRequest" type="mmsos:RetrieveMeanElementRequest"/>
	<xsd:complexType name="RetrieveMeanElementRequest">
		<xsd:choice>
			<xsd:element name="bySsaId" type="mmsos:MeanElementBySsaIdFilter"/>
			<xsd:element name="filter" type="mmsos:MeanElementFilter"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:element name="retrieveMeanElementResponse" type="mmsos:RetrieveMeanElementResponse"/>
	<xsd:complexType name="RetrieveMeanElementResponse">
		<xsd:sequence>
			<xsd:element name="meanElement" type="mmsos:MeanElement" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- countMeanElement -->
	<xsd:element name="countMeanElementRequest" type="mmsos:CountMeanElementRequest"/>
	<xsd:complexType name="CountMeanElementRequest">
		<xsd:sequence>
			<xsd:element name="filter" type="mmsos:MeanElementFilter"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="countMeanElementResponse" type="mmsos:CountMeanElementResponse"/>
	<xsd:complexType name="CountMeanElementResponse">
		<xsd:sequence>
			<xsd:element name="number" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- addEphemeris -->
	<xsd:element name="addEphemerisRequest" type="mmsos:AddEphemerisRequest"/>
	<xsd:complexType name="AddEphemerisRequest">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long"/>
			<xsd:element name="ephemeris" type="cateph:Ephemeredes"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="addEphemerisResponse" type="mmsos:AddEphemerisResponse"/>
	<xsd:complexType name="AddEphemerisResponse">
		<xsd:sequence>
			<xsd:element name="ephemerisId" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- retrieveCurrentEphemeris -->
	<xsd:element name="retrieveCurrentEphemerisRequest" type="mmsos:RetrieveCurrentEphemerisRequest"/>
	<xsd:complexType name="RetrieveCurrentEphemerisRequest">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="retrieveCurrentEphemerisResponse" type="mmsos:RetrieveCurrentEphemerisResponse"/>
	<xsd:complexType name="RetrieveCurrentEphemerisResponse">
		<xsd:sequence>
			<xsd:element name="ephemeris" type="cateph:Ephemeredes"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- retrieveEphemerisIds -->
	<xsd:element name="retrieveEphemerisIdsRequest" type="mmsos:RetrieveEphemerisIdsRequest"/>
	<xsd:complexType name="RetrieveEphemerisIdsRequest">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long"/>
			<xsd:element name="from" type="ndm:epochType" minOccurs="0"/>
			<xsd:element name="to" type="ndm:epochType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="retrieveEphemerisIdsResponse" type="mmsos:RetrieveEphemerisIdsResponse"/>
	<xsd:complexType name="RetrieveEphemerisIdsResponse">
		<xsd:sequence>
			<xsd:element name="ids" type="xsd:long" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="sliceLength" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- retrieveEphemeris -->
	<xsd:element name="retrieveEphemerisRequest" type="mmsos:RetrieveEphemerisRequest"/>
	<xsd:complexType name="RetrieveEphemerisRequest">
		<xsd:sequence>
			<xsd:choice>
				<xsd:element name="ephemerisIds" type="xsd:long" maxOccurs="unbounded"/>
				<xsd:element name="filter" type="mmsos:EphemerisFilter"/>
			</xsd:choice>
			<xsd:element name="onlyMetadata" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="retrieveEphemerisResponse" type="mmsos:RetrieveEphemerisResponse"/>
	<xsd:complexType name="RetrieveEphemerisResponse">
		<xsd:sequence>
			<xsd:element name="ephemeris" type="cateph:Ephemeredes" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- formatEphemeris -->
	<xsd:element name="formatEphemerisRequest" type="mmsos:FormatEphemerisRequest"/>
	<xsd:complexType name="FormatEphemerisRequest">
		<xsd:sequence>
			<xsd:element name="ObjectIDList" type="catobj:ObjectIdType" maxOccurs="unbounded"/>
			<xsd:element name="ThirdParty" type="xsd:boolean">
				<xsd:annotation>
					<xsd:documentation>
							Flag to include third party data
						</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Period" type="com:TimeRange"/>
			<xsd:element name="getCovMat" type="xsd:boolean">
				<xsd:annotation>
					<xsd:documentation>
							Flag to indicate the type of response
							needed. getCovMat=true->response will
							include only stateVector+CovarianceMatrix.
							getCovMat==false, response will include
							stateVector only.
						</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="responseDataFormat" type="mmsos:EphemeridesDataFormatType"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="formatEphemerisResponse" type="mmsos:FormatEphemerisResponse"/>
	<xsd:complexType name="FormatEphemerisResponse">
		<xsd:sequence>
			<xsd:element name="ephemeris" type="mmsos:EphemeridesOutputType" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- updateEphemeris -->
	<xsd:element name="updateEphemerisRequest" type="mmsos:UpdateEphemerisRequest"/>
	<xsd:complexType name="UpdateEphemerisRequest">
		<xsd:sequence>
			<xsd:element name="ephemeris" type="cateph:Ephemeredes"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="updateEphemerisResponse" type="mmsos:UpdateEphemerisResponse"/>
	<xsd:complexType name="UpdateEphemerisResponse">
		<xsd:sequence>
			<xsd:element name="ok" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- deleteEphemeris -->
	<xsd:element name="deleteEphemerisRequest" type="mmsos:DeleteEphemerisRequest"/>
	<xsd:complexType name="DeleteEphemerisRequest">
		<xsd:sequence>
			<xsd:element name="ephemerisId" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="deleteEphemerisResponse" type="mmsos:DeleteEphemerisResponse"/>
	<xsd:complexType name="DeleteEphemerisResponse">
		<xsd:sequence>
			<xsd:element name="ok" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- countEphemeris -->
	<xsd:element name="countEphemerisRequest" type="mmsos:CountEphemerisRequest"/>
	<xsd:complexType name="CountEphemerisRequest">
		<xsd:sequence>
			<xsd:sequence>
				<xsd:element name="filter" type="mmsos:EphemerisFilter"/>
			</xsd:sequence>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="countEphemerisResponse" type="mmsos:CountEphemerisResponse"/>
	<xsd:complexType name="CountEphemerisResponse">
		<xsd:sequence>
			<xsd:element name="number" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- addManoeuvre -->
	<xsd:element name="addManoeuvreRequest" type="mmsos:AddManoeuvreRequest"/>
	<xsd:complexType name="AddManoeuvreRequest">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long"/>
			<xsd:element name="data" type="mmsos:ManoeuvreDetails"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="addManoeuvreResponse" type="mmsos:AddManoeuvreResponse"/>
	<xsd:complexType name="AddManoeuvreResponse">
		<xsd:sequence>
			<xsd:element name="manoeuvreId" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- retrieveManoeuvreIds -->
	<xsd:element name="retrieveManoeuvreIdsRequest" type="mmsos:RetrieveManoeuvreIdsRequest"/>
	<xsd:complexType name="RetrieveManoeuvreIdsRequest">
		<xsd:sequence>
			<xsd:element name="flag" type="omc:ManeuverFlagType"/>
			<xsd:element name="ssaId" type="xsd:long"/>
			<xsd:element name="from" type="ndm:epochType" minOccurs="0"/>
			<xsd:element name="to" type="ndm:epochType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="retrieveManoeuvreIdsResponse" type="mmsos:RetrieveManoeuvreIdsResponse"/>
	<xsd:complexType name="RetrieveManoeuvreIdsResponse">
		<xsd:sequence>
			<xsd:element name="ids" type="xsd:long" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="sliceLength" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- retrieveManoeuvre -->
	<xsd:element name="retrieveManoeuvreRequest" type="mmsos:RetrieveManoeuvreRequest"/>
	<xsd:complexType name="RetrieveManoeuvreRequest">
		<xsd:sequence>
			<xsd:element name="manoeuvreIds" type="xsd:long" maxOccurs="unbounded"/>
			<xsd:element name="flag" type="omc:ManeuverFlagType"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="retrieveManoeuvreResponse" type="mmsos:RetrieveManoeuvreResponse"/>
	<xsd:complexType name="RetrieveManoeuvreResponse">
		<xsd:sequence>
			<xsd:element name="data" type="mmsos:ManoeuvreDetails" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- updateManoeuvre -->
	<xsd:element name="updateManoeuvreRequest" type="mmsos:UpdateManoeuvreRequest"/>
	<xsd:complexType name="UpdateManoeuvreRequest">
		<xsd:sequence>
			<xsd:element name="data" type="mmsos:ManoeuvreDetails"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="updateManoeuvreResponse" type="mmsos:UpdateManoeuvreResponse"/>
	<xsd:complexType name="UpdateManoeuvreResponse">
		<xsd:sequence>
			<xsd:element name="ok" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- deleteManoeuvre -->
	<xsd:element name="deleteManoeuvreRequest" type="mmsos:DeleteManoeuvreRequest"/>
	<xsd:complexType name="DeleteManoeuvreRequest">
		<xsd:sequence>
			<xsd:element name="manoeuvreId" type="xsd:long"/>
			<xsd:element name="flag" type="omc:ManeuverFlagType"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="deleteManoeuvreResponse" type="mmsos:DeleteManoeuvreResponse"/>
	<xsd:complexType name="DeleteManoeuvreResponse">
		<xsd:sequence>
			<xsd:element name="ok" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- subscribe -->
	<xsd:element name="subscribeRequest" type="mmsos:SubscribeRequest"/>
	<xsd:complexType name="SubscribeRequest">
		<xsd:sequence>
			<xsd:element name="endpoint" type="tns:EndpointReferenceType"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="subscribeResponse" type="mmsos:SubscribeResponse"/>
	<xsd:complexType name="SubscribeResponse">
		<xsd:sequence>
			<xsd:element name="subscriberId" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- unsubscribe -->
	<xsd:element name="unsubscribeRequest" type="mmsos:UnsubscribeRequest"/>
	<xsd:complexType name="UnsubscribeRequest">
		<xsd:choice>
			<xsd:element name="subscriberId" type="xsd:long"/>
			<xsd:element name="endpoint" type="tns:EndpointReferenceType"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:element name="unsubscribeResponse" type="mmsos:UnsubscribeResponse"/>
	<xsd:complexType name="UnsubscribeResponse">
		<xsd:sequence>
			<xsd:element name="ok" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- setFragmentationEventToObject -->
	<xsd:element name="setFragmentationEventToObjectRequest" type="mmsos:SetFragmentationEventToObjectRequest"/>
	<xsd:complexType name="SetFragmentationEventToObjectRequest">
		<xsd:sequence>
			<xsd:element name="objectSSAID" type="com:ObjectRef"/>
			<xsd:element name="fragmentationEventId" type="com:FragmentationEventRef"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="setFragmentationEventToObjectResponse" type="mmsos:SetFragmentationEventToObjectResponse"/>
	<xsd:complexType name="SetFragmentationEventToObjectResponse">
		<xsd:sequence>
			<xsd:element name="out" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- onUpdateCatalogueOrbitalInfo -->
	<xsd:element name="onUpdateOrbitalInfoRequest" type="mmsos:OnUpdateOrbitalInfoRequest"/>
	<xsd:complexType name="OnUpdateOrbitalInfoRequest">
		<xsd:sequence>
			<xsd:element name="objectSSAID" type="xsd:long"/>
			<xsd:element name="orbitalInfoId" type="xsd:long"/>
			<xsd:element name="orbitalInfoType" type="mmsos:UpdateOrbitalInfoType">
				<xsd:annotation>
					<xsd:documentation>Orbital Info type [ORBIT, MEAN_ELEMENT or EPHEMERIS]</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="action" type="mmsos:UpdateOrbitalInfoAction">
				<xsd:annotation>
					<xsd:documentation>Action performed [ADD, UPDATE or DELETE]</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<!-- onUpdateManoeuvreInfo-->
	<xsd:element name="onUpdateManoeuvreInfoRequest" type="mmsos:OnUpdateManoeuvreInfoRequest"/>
	<xsd:complexType name="OnUpdateManoeuvreInfoRequest">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long" minOccurs="0"/>
			<xsd:element name="manoeuvreId" type="xsd:long" minOccurs="0"/>
			<xsd:element name="maneuvre" type="mmsos:ManoeuvreDetails" minOccurs="0"/>
			<xsd:element name="action" type="mmsos:UpdateManoeuvreAction">
				<xsd:annotation>
					<xsd:documentation>Action performed [NEW_MANOEUVRE, UPDATE_MANOEUVRE or DELETE_MANOEUVRE]</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<!-- onOrbitUpdateDeadline-->
	<xsd:element name="onOrbitUpdateDeadlineRequest" type="mmsos:OnOrbitUpdateDeadlineRequest"/>
	<xsd:complexType name="OnOrbitUpdateDeadlineRequest">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>List of objects for wich the orbit update deadline has expired</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<!--Data Types -->
	<xsd:simpleType name="UpdateOrbitalInfoType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="ORBIT"/>
			<xsd:enumeration value="MEAN_ELEMENT"/>
			<xsd:enumeration value="EPHEMERIS"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="UpdateOrbitalInfoAction">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="ADD"/>
			<xsd:enumeration value="UPDATE"/>
			<xsd:enumeration value="DELETE"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="UpdateManoeuvreAction">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="NEW_MANOEUVRE"/>
			<xsd:enumeration value="UPDATE_MANOEUVRE"/>
			<xsd:enumeration value="DELETE_MANOEUVRE"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="ManoeuvreDetails">
		<xsd:sequence>
			<xsd:element name="manoeuvreId" type="xsd:long"/>
			<xsd:element name="flag" type="omc:ManeuverFlagType"/>
			<xsd:element name="data" type="eCCSDS:extendedManeuverParametersType"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="ObjectFilter">
		<xsd:sequence>
			<xsd:element name="byName" type="xsd:string" minOccurs="0"/>
			<xsd:element name="byOwner" type="xsd:string" minOccurs="0"/>
			<xsd:element name="byClassification" type="catobj:ClassificationLevelTypeEnum" minOccurs="0"/>
			<xsd:element name="byType" type="catobj:ObjectTypeEnum" minOccurs="0"/>
			<xsd:element name="byPriority" type="com:RangeType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="DPCObjectFilter">
		<xsd:sequence>
			<xsd:element name="orbitalRegion" type="mmsos:DPCOrbitRegionEnum" minOccurs="0"/>
			<xsd:element name="accuracyViolatedFlag" type="xsd:boolean" minOccurs="0"/>
			<xsd:element name="thirdPartyFlag" type="xsd:boolean" minOccurs="0"/>
			<xsd:element name="newObjectFlag" type="xsd:boolean" minOccurs="0"/>
			<xsd:element name="updatedObjectFlag" type="xsd:boolean" minOccurs="0"/>
			<xsd:element name="keplerianElements" type="mmsos:KeplerianElementsFilter" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:simpleType name="DPCOrbitRegionEnum">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="LEO_RESIDENT"/>
			<xsd:enumeration value="GEO_RESIDENT"/>
			<xsd:enumeration value="MEO_RESIDENT"/>
			<xsd:enumeration value="GEO_TRANSIENT"/>
			<xsd:enumeration value="MEO_TRANSIENT"/>
			<xsd:enumeration value="OTH"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="OrbitDetails">
		<xsd:sequence>
			<xsd:element name="orbit" type="catorb:Orbit"/>
			<xsd:element name="timestamp" type="xsd:dateTime"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="ObjectNameMap">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long"/>
			<xsd:element name="name" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:simpleType name="UpdatedByType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="PROPAGATION"/>
			<xsd:enumeration value="OBSERVATION"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="CatalogueObjectFilter">
		<xsd:annotation>
			<xsd:documentation/>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation/>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="cosparID" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation/>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="name" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation/>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="objectType" type="catobj:ObjectTypeEnum" minOccurs="0"/>
			<xsd:element name="orbitalRegion" type="com:SpaceRegionsEnum" minOccurs="0"/>
			<xsd:element name="orbitalRange" type="com:RangeType" minOccurs="0"/>
			<xsd:element name="perigeeRange" type="com:RangeType" minOccurs="0"/>
			<xsd:element name="apogeeRange" type="com:RangeType" minOccurs="0"/>
			<xsd:element name="lastOrbitDeterminationTimeRange" type="com:TimeRange" minOccurs="0"/>
			<xsd:element name="lastOrbitalUploadTimeRange" type="com:TimeRange" minOccurs="0"/>
			<xsd:element name="keplerianElements" type="mmsos:KeplerianElementsFilter" minOccurs="0"/>
			<xsd:element name="firstElement" type="xsd:integer" minOccurs="0"/>
			<xsd:element name="maxElements" type="xsd:integer" minOccurs="0"/>
			<xsd:element name="orderBy" type="mmsos:ObjectOrderEnum" minOccurs="0"/>
			<xsd:element name="descending" type="xsd:boolean" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="KeplerianElementsFilter">
		<xsd:sequence>
			<xsd:element name="comment" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="semi_major_axis_start" type="ndm:distanceType" minOccurs="0"/>
			<xsd:element name="semi_major_axis_end" type="ndm:distanceType" minOccurs="0"/>
			<xsd:element name="eccentricity_start" type="ndm:nonNegativeDouble" minOccurs="0"/>
			<xsd:element name="eccentricity_end" type="ndm:nonNegativeDouble" minOccurs="0"/>
			<xsd:element name="inclination_start" type="ndm:inclinationType" minOccurs="0"/>
			<xsd:element name="inclination_end" type="ndm:inclinationType" minOccurs="0"/>
			<xsd:element name="ra_of_asc_node_start" type="ndm:angleType" minOccurs="0"/>
			<xsd:element name="ra_of_asc_node_end" type="ndm:angleType" minOccurs="0"/>
			<xsd:element name="arg_of_pericenter_start" type="ndm:angleType" minOccurs="0"/>
			<xsd:element name="arg_of_pericenter_end" type="ndm:angleType" minOccurs="0"/>
			<xsd:element name="mean_anomaly_start" type="ndm:angleType" minOccurs="0"/>
			<xsd:element name="mean_anomaly_end" type="ndm:angleType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:simpleType name="ObjectClassEnum">
		<xsd:annotation>
			<xsd:documentation>
                &lt;p&gt;Enumeration of kinds of
                Objects.&lt;/p&gt;&lt;p&gt;Values inserted can be
                {0,'debris'},
                {1,'payload'}, {2,'manoeuvrable
                payload'}.&lt;/p&gt; </xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="debris"/>
			<xsd:enumeration value="payload"/>
			<xsd:enumeration value="manoeuvrable payload"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="ObjectOrderEnum">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="OBJECTS_SSAID"/>
			<xsd:enumeration value="OBJECTS_NM_COSPARID"/>
			<xsd:enumeration value="OBJECTS_NAME"/>
			<xsd:enumeration value="OBJECTS_TYPE"/>
			<xsd:enumeration value="OBJECTS_SATNO"/>
			<xsd:enumeration value="SPACE_REGION"/>
			<xsd:enumeration value="ESTIMATED_MASS"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="OrbitFilter">
		<xsd:annotation>
			<xsd:documentation>Orbit Filter configures the properties to
                retrieve a set of orbits that match a condition.
            </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>SSA ESA Id of the object.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="cosparID" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Cospar ID of the object</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="name" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Common Name of the object</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="orbitalRange" type="com:RangeType" minOccurs="0"/>
			<xsd:element name="perigeeRange" type="com:RangeType" minOccurs="0"/>
			<xsd:element name="apogeeRange" type="com:RangeType" minOccurs="0"/>
			<xsd:element name="orbitDeterminationTimeRange" type="com:TimeRange" minOccurs="0"/>
			<xsd:element name="orbitalUploadTimeRange" type="com:TimeRange" minOccurs="0"/>
			<xsd:element name="firstElement" type="xsd:integer" minOccurs="0"/>
			<xsd:element name="maxElements" type="xsd:integer" minOccurs="0"/>
			<xsd:element name="orderBy" type="mmsos:OrbitOrderEnum" minOccurs="0"/>
			<xsd:element name="descending" type="xsd:boolean" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:simpleType name="OrbitOrderEnum">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="ID"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="MeanElement">
		<xsd:sequence>
			<xsd:element name="id" type="xsd:long">
				<xsd:annotation>
					<xsd:documentation>unique identifier of the meanelement</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="type" type="catobj:ObjectTypeEnum"/>
			<xsd:element name="omm" type="ndm:ommType"/>
			<xsd:element name="includesThirdPartyData" type="xsd:boolean"/>
			<xsd:element name="updatedBy" type="com:UpdatedByType"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="MeanElementFilter">
		<xsd:annotation>
			<xsd:documentation>Mean Element Filter configures the
                properties to
                retrieve a set of mean elements that match
                a condition.
            </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>SSA ESA Id of the object.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="cosparID" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Cospar ID of the object</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="name" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Common Name of the object</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="orbitalRange" type="com:RangeType" minOccurs="0"/>
			<xsd:element name="perigeeRange" type="com:RangeType" minOccurs="0"/>
			<xsd:element name="apogeeRange" type="com:RangeType" minOccurs="0"/>
			<xsd:element name="orbitDeterminationTimeRange" type="com:TimeRange" minOccurs="0"/>
			<xsd:element name="orbitalUploadTimeRange" type="com:TimeRange" minOccurs="0"/>
			<xsd:element name="keplerianElements" type="mmsos:KeplerianElementsFilter" minOccurs="0"/>
			<xsd:element name="firstElement" type="xsd:integer" minOccurs="0"/>
			<xsd:element name="maxElements" type="xsd:integer" minOccurs="0"/>
			<xsd:element name="orderBy" type="mmsos:MeanElementOrderEnum" minOccurs="0"/>
			<xsd:element name="descending" type="xsd:boolean" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="MeanElementBySsaIdFilter">
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long"/>
			<xsd:element name="timeRange" type="com:TimeRange" minOccurs="0"/>
			<xsd:element name="firstElement" type="xsd:int" minOccurs="0"/>
			<xsd:element name="maxElements" type="xsd:int" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:simpleType name="MeanElementOrderEnum">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="ID"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="EphemerisFilter">
		<xsd:annotation>
			<xsd:documentation>Ephemeris Filter configures the
                properties to
                retrieve a set of ephemerides that match a
                condition.
            </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="ssaId" type="xsd:long" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>SSA ESA Id of the object.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="cosparID" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Cospar ID of the object</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="name" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Common Name of the object</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="orbitalRange" type="com:RangeType" minOccurs="0"/>
			<xsd:element name="perigeeRange" type="com:RangeType" minOccurs="0"/>
			<xsd:element name="apogeeRange" type="com:RangeType" minOccurs="0"/>
			<xsd:element name="orbitDeterminationTimeRange" type="com:TimeRange" minOccurs="0"/>
			<xsd:element name="orbitalUploadTimeRange" type="com:TimeRange" minOccurs="0"/>
			<xsd:element name="firstElement" type="xsd:integer" minOccurs="0"/>
			<xsd:element name="maxElements" type="xsd:integer" minOccurs="0"/>
			<xsd:element name="orderBy" type="mmsos:EphemerisOrderEnum" minOccurs="0"/>
			<xsd:element name="descending" type="xsd:boolean" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:simpleType name="EphemerisOrderEnum">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="ID"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="EphemeridesDataFormatType">
		<xsd:annotation>
			<xsd:documentation>
				Enumeration of possible Orbit Format data products.
				XML,ASCII or BOTH
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="XML"/>
			<xsd:enumeration value="ASCII"/>
			<xsd:enumeration value="BOTH"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="EphemeridesOutputType">
		<xsd:sequence>
			<xsd:element name="ssaId" type="catobj:ObjectIdType"/>
			<xsd:element name="xmlEphemerides" type="cateph:Ephemeredes" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="asciiEphemerides" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="ThirdPartyListType">
		<xsd:sequence>
			<xsd:element name="thirdPartyProvider" type="xsd:string" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Name of a ThirdParty Provider</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="ObjectIDRangeType">
		<xsd:annotation>
			<xsd:documentation>  Range of objects Id to be analyzed</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="minObjectID" type="catobj:ObjectIdType">
				<xsd:annotation>
					<xsd:documentation>minimum ObjectID considered</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="maxObjectID" type="catobj:ObjectIdType">
				<xsd:annotation>
					<xsd:documentation>maximum ObjectID considered</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="StateVectorParametersType">
		<xsd:sequence>
			<xsd:element name="CD" type="xsd:double">
				<xsd:annotation>
					<xsd:documentation>drag coefficient</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="CREFL" type="xsd:double">
				<xsd:annotation>
					<xsd:documentation>solar radiation pressure or reflectivity coefficient</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<!-- MMSO Service Fault message -->
	<xsd:simpleType name="FaultInfo">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="SUBSCRIPTION ERROR"/>
			<xsd:enumeration value="PARAMETER_ERROR"/>
			<xsd:enumeration value="SERVICE_CONFIGURATION_ERROR"/>
			<xsd:enumeration value="DATABASE_ERROR"/>
			<xsd:enumeration value="OBJECT_IS_LOCKED"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:element name="mmsoServiceFault" type="mmsos:FaultInfo"/>
	<!-- MMSO DPC Catalogue Extension -->
	<xsd:element name="getDPCObjectDataRequestType">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="ssaId" type="xsd:long"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="getDPCObjectDataResponseType">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="object" type="mmsos:DPCCatalogDataType"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="getDPCObjectDataPreviousToRequestType">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="ssaId" type="xsd:long"/>
				<xsd:element name="fromDate" type="ndm:epochType"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="getDPCObjectDataPreviousToResponseType">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="object" type="mmsos:DPCCatalogDataType"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="updateDPCObjectDataRequestType">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="object" type="mmsos:DPCCatalogDataType"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="updateDPCObjectDataResponseType">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="success" type="xsd:boolean"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="EmptyInputType"/>
	<xsd:element name="emptyInputType" type="mmsos:EmptyInputType"/>
	<xsd:element name="getDPCCatalogRequestType">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="mmsos:emptyInputType"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="getDPCCatalogResponseType">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="fileData" type="xsd:base64Binary"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="getSSIMCatalogRequestType">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="mmsos:emptyInputType"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="getSSIMCatalogResponseType">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="fileData" type="xsd:base64Binary"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<!-- DPC Data Catalog: contain extra information required by the DPC -->
	<xsd:complexType name="DPCCatalogDataType">
		<xsd:sequence>
			<xsd:element name="Id" type="xsd:long"/>
			<xsd:element name="ObjectId" type="xsd:long"/>
			<xsd:element name="ObjectName" type="xsd:string"/>
			<xsd:element name="Satno" type="xsd:long"/>
			<xsd:element name="CosparId" type="xsd:string"/>
			<xsd:element name="Area" type="xsd:double"/>
			<xsd:element name="MeanAreaNOfTracks" type="xsd:int"/>
			<xsd:element name="Mass" type="xsd:double"/>
			<xsd:element name="RCS" type="xsd:double"/>
			<xsd:element name="AbsMagnitude" type="xsd:double"/>
			<xsd:element name="SvEpoch" type="ndm:epochType"/>
			<xsd:element name="SvMJD2000" type="xsd:string"/>
			<xsd:element name="SemimajorAxis" type="xsd:double"/>
			<xsd:element name="Eccentricity" type="xsd:double"/>
			<xsd:element name="Inclination" type="xsd:double"/>
			<xsd:element name="RightAscension" type="xsd:double"/>
			<xsd:element name="ArgumentOfPerigee" type="xsd:double"/>
			<xsd:element name="TrueAnomaly" type="xsd:double"/>
			<xsd:element name="AlongTrack" type="xsd:double"/>
			<xsd:element name="CrossTrack" type="xsd:double"/>
			<xsd:element name="Radial" type="xsd:double"/>
			<xsd:element name="StateVector11" type="xsd:string"/>
			<xsd:element name="CovMatrix11" type="xsd:string"/>
			<xsd:element name="Cdrag" type="xsd:double"/>
			<xsd:element name="Crefl" type="xsd:double"/>
			<xsd:element name="OrbitTypeId" type="xsd:int"/>
			<xsd:element name="AccuracyEnvelopeViolated" type="xsd:boolean"/>
			<xsd:element name="PlanningReqExpiration" type="ndm:epochType"/>
			<xsd:element name="NewObject" type="xsd:boolean"/>
			<xsd:element name="IncludesThirdPartyData" type="xsd:boolean"/>
			<xsd:element name="ReentryTime" type="ndm:epochType"/>
			<xsd:element name="Decayed" type="xsd:boolean"/>
			<xsd:element name="UpdateTime" type="ndm:epochType"/>
			<xsd:element name="CreationTime" type="ndm:epochType"/>
			<xsd:element name="VirtualObject" type="xsd:boolean"/>
			<xsd:element name="ManObjectId" type="xsd:long"/>
			<xsd:element name="ManEpochIgnition" type="ndm:epochType"/>
			<xsd:element name="ManConfirmed" type="xsd:boolean"/>
			<xsd:element name="ValidObject" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="CovarianceMatrixAddDataType">
		<xsd:sequence>
			<xsd:element name="Cd_Cd" type="xsd:double"/>
			<xsd:element name="Cd_CREFL" type="xsd:double"/>
			<xsd:element name="CREFL_CREFL" type="xsd:double"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="getOutOfDateObjectsRequestType">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="AgendaDuration" type="xsd:double"/>
				<xsd:element name="BatchDuration" type="xsd:double"/>
				<xsd:element name="CurrentEpoch" type="ndm:epochType"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="getOutOfDateObjectsResponseType">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="ObjectId" type="xsd:long" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<!-- Catalogue Overview Report for DPC -->
	<xsd:element name="GetCatalogueOverviewRequestType">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="LoggedTime" type="ndm:epochType"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="DPCCatalogueOverview">
		<xsd:sequence>
			<xsd:element name="OrbitType" type="xsd:string"/>
			<xsd:element name="Total" type="xsd:long"/>
			<xsd:element name="ViolatingAcc" type="xsd:long"/>
			<xsd:element name="ExpiredTrack" type="xsd:long"/>
			<xsd:element name="NewObjects" type="xsd:long"/>
			<xsd:element name="UpdatedObjets" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="GetCatalogueOverviewResponseType">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="CatalogueData" type="mmsos:DPCCatalogueOverview" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="GetCatalogueOverviewReportRequestType">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="OrbitType" type="xsd:string"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="DPCCatalogReportItem">
		<xsd:sequence>
			<xsd:element name="Time" type="ndm:epochType"/>
			<xsd:element name="Total" type="xsd:long"/>
			<xsd:element name="ViolatingAcc" type="xsd:long"/>
			<xsd:element name="ExpiredTrack" type="xsd:long"/>
			<xsd:element name="NewObjects" type="xsd:long"/>
			<xsd:element name="UpdatedObjets" type="xsd:long"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="GetCatalogueOverviewReportResponseType">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="CatalogueData" type="mmsos:DPCCatalogReportItem" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<!-- getCatalogMaxEpoch -->
	<xsd:element name="getCatalogMaxEpochRequestType">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="mmsos:emptyInputType"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="getCatalogMaxEpochResponseType">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="Epoch" type="ndm:epochType"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
</xsd:schema>
