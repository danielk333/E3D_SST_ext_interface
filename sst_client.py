#!/usr/bin/env python3


"""
"""
import time
import glob
import pathlib
import http.client
from urllib.request import pathname2url
import shutil
import os

import xmlschema

from config import SERVICES, REQUESTS
from config import HTTP_404, HTTP_200

#TODO: fix below lines [suds]
class SSTClient:
    '''Main automatic client for delivering data generated by the EISCAT 3D SST Services.

    :param logger logger: A logger instance, all calls to the application from the simple_server will be logged to this instance.
    :param configparser.ConfigParser config: The server configuration.
    :param bool delivery_log: If :code:`True` a internal list is kept of all files/data that has been delivered, can be considered a intentional memory leak and should only be used for testing.
    '''
    def __init__(self, config, logger, delivery_log=False):
        self.logger = logger
        self.config = config
        self.delivery_log = delivery_log
        self.deliveries = []

        inbox = config.get('SST Client', 'Inbox')
        inbox = pathlib.Path(inbox).absolute()

        self.inbox = inbox
        self.logger.debug(f'SSTClient: inbox={self.inbox}')

        archive = self.config.get('SST Client', 'Archive')
        archive = pathlib.Path(archive).absolute()

        self.archive = archive
        self.logger.debug(f'SSTClient: archive={self.archive}')

        self.file_ext = self.config.get('SST Client', 'File-extensions').split(',')
        self.file_ext = [x.strip() for x in self.file_ext]
        self.logger.debug(f'SSTClient: file extensions={self.file_ext}')

        self.schema = xmlschema.XMLSchema(REQUESTS['TDM']['schema'])



    def run(self):
        self.logger.info('SSTClient: STARTED')
        self.__run = True

        while self.__run:
            self.logger.debug('SSTClient: looking for new tracklets to deliver')

            files = []
            for ext in self.file_ext:
                files += self.inbox.glob(f'**/*.{ext}')

            files = [pathlib.Path(file) for file in files]

            self.logger.info(f'SSTClient: {len(files)} files found, delivering')

            rest = http.client.HTTPConnection(
                self.config.get('SST Client', 'Deliver Server'), 
                self.config.getint('SST Client', 'Deliver Port'),
            )

            for file in files:
                with open(file, 'r') as r:
                    xml_data = r.read()

                try:
                    self.schema.decode(xml_data)
                except Exception as e:
                    self.logger.debug(f'SST Client: file "{file}" not valid TDM-XML:')
                    self.logger.exception(e)

                header = {
                    'Content-Type': 'text/xml',
                    'Content-Length': str(len(xml_data)),
                }

                rest.request('POST', REQUESTS['TDM']['path'], body=xml_data, headers=header)
            
                response = rest.getresponse()
                raw = response.read().decode("utf-8")
                
                if raw == REQUESTS['TDM']['response']:
                    shutil.move(file, self.archive / file.name)
                    self.logger.debug(f'SSTClient: Delivery completed')
                    if self.delivery_log:
                        self.deliveries += [file]
                else:
                    self.logger.debug(f'SSTClient: Delivery failed "{raw}"')

            time.sleep(self.config.getfloat('SST Client', 'Deliver interval'))


    def stop(self):
        self.__run = False
        self.logger.info('SST Client: STOPPED')

